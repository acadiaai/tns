terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
  }

  backend "gcs" {
    # This bucket name is dynamically generated by the bootstrap script
    # It follows the pattern: <project-id>-tfstate
  }
}

provider "google" {
  project = var.gcp_project_id
  region  = "us-central1"
}

# --- Application Service Account (for the running app) ---
resource "google_service_account" "app_sa" {
  account_id   = "therapy-nav-api-sa"
  display_name = "Therapy Navigation API Service Account"
}

# Grant the App SA permissions to read its own secrets
resource "google_project_iam_member" "secret_accessor" {
  project = var.gcp_project_id
  role    = "roles/secretmanager.secretAccessor"
  member  = google_service_account.app_sa.member
}

# Grant the App SA permissions to use Gemini API
resource "google_project_iam_member" "generative_ai_user" {
  project = var.gcp_project_id
  role    = "roles/generativelanguage.user"
  member  = google_service_account.app_sa.member
}

# --- Artifact Registry for Docker Images ---
resource "google_artifact_registry_repository" "docker_repo" {
  repository_id = "therapy-nav-images"
  format        = "DOCKER"
  description   = "Docker repository for therapy navigation application images"
}

# --- Secrets for API Keys ---
resource "google_secret_manager_secret" "gemini_api_key" {
  secret_id = "gemini-api-key-${var.environment_name}"
  replication {
    automatic = true
  }
}

resource "google_secret_manager_secret" "jwt_secret" {
  secret_id = "jwt-secret-${var.environment_name}"
  replication {
    automatic = true
  }
}

# --- Cloud Storage for ChromaDB embeddings ---
resource "google_storage_bucket" "embeddings_bucket" {
  name     = "${var.gcp_project_id}-embeddings-${var.environment_name}"
  location = "US-CENTRAL1"
  
  versioning {
    enabled = true
  }
  
  lifecycle_rule {
    condition {
      age = 30
    }
    action {
      type = "Delete"
    }
  }
}

# Grant the App SA permissions to read/write embeddings
resource "google_storage_bucket_iam_member" "embeddings_bucket_iam" {
  bucket = google_storage_bucket.embeddings_bucket.name
  role   = "roles/storage.objectAdmin"
  member = google_service_account.app_sa.member
}

# --- VPC Connector for Cloud SQL ---
resource "google_vpc_access_connector" "connector" {
  name          = "therapy-connector-${var.environment_name}"
  region        = "us-central1"
  ip_cidr_range = "10.8.0.0/28"
  network       = "default"
}

# --- Cloud SQL Database ---
resource "google_sql_database_instance" "postgres" {
  name             = "therapy-nav-db-${var.environment_name}"
  database_version = "POSTGRES_15"
  region           = "us-central1"

  settings {
    tier = "db-f1-micro" # Smallest instance for dev

    backup_configuration {
      enabled = true
      start_time = "03:00"
    }

    ip_configuration {
      ipv4_enabled = true
      authorized_networks {
        name  = "all" # For dev only - restrict in production
        value = "0.0.0.0/0"
      }
    }
  }

  deletion_protection = false # Allow deletion in dev
}

resource "google_sql_database" "therapy_db" {
  name     = "therapy"
  instance = google_sql_database_instance.postgres.name
}

resource "google_sql_user" "app_user" {
  name     = "therapy_app"
  instance = google_sql_database_instance.postgres.name
  password = var.db_password # Set via terraform.tfvars or env
}

# --- Cloud Run Service for Backend API ---
resource "google_cloud_run_v2_service" "api_svc" {
  name     = "therapy-nav-api-${var.environment_name}"
  location = "us-central1"

  template {
    service_account = google_service_account.app_sa.email

    # WebSocket timeout configuration
    timeout = "3600s"

    annotations = {
      "run.googleapis.com/cpu-throttling" = "false"
    }

    containers {
      image = "us-central1-docker.pkg.dev/${var.gcp_project_id}/therapy-nav-images/api:latest"

      env {
        name  = "ENVIRONMENT"
        value = var.environment_name
      }

      env {
        name  = "PORT"
        value = "8083"
      }

      env {
        name = "GEMINI_API_KEY"
        value_source {
          secret_key_ref {
            secret  = google_secret_manager_secret.gemini_api_key.secret_id
            version = "latest"
          }
        }
      }

      env {
        name = "JWT_SECRET"
        value_source {
          secret_key_ref {
            secret  = google_secret_manager_secret.jwt_secret.secret_id
            version = "latest"
          }
        }
      }

      env {
        name  = "EMBEDDINGS_BUCKET"
        value = google_storage_bucket.embeddings_bucket.name
      }

      env {
        name  = "DATABASE_URL"
        value = "host=${google_sql_database_instance.postgres.public_ip_address} user=${google_sql_user.app_user.name} password=${var.db_password} dbname=${google_sql_database.therapy_db.name} sslmode=require"
      }

      env {
        name  = "ENV"
        value = "production"
      }

      resources {
        limits = {
          cpu    = "2"
          memory = "2Gi"
        }
      }
    }

    scaling {
      min_instance_count = 0  # Allow scale to zero for dev
      max_instance_count = 10
    }

    # Cloud SQL connection
    vpc_access {
      connector = google_vpc_access_connector.connector.id
      egress = "ALL_TRAFFIC"
    }
  }

  traffic {
    type    = "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST"
    percent = 100
  }
}

# Make the API service publicly accessible
resource "google_cloud_run_service_iam_member" "api_public" {
  service  = google_cloud_run_v2_service.api_svc.name
  location = google_cloud_run_v2_service.api_svc.location
  role     = "roles/run.invoker"
  member   = "allUsers"
}

# --- Cloud Run Service for Frontend ---
resource "google_cloud_run_v2_service" "frontend_svc" {
  name     = "therapy-nav-frontend-${var.environment_name}"
  location = "us-central1"

  template {
    containers {
      image = "us-central1-docker.pkg.dev/${var.gcp_project_id}/therapy-nav-images/frontend:latest"

      env {
        name  = "VITE_API_URL"
        value = google_cloud_run_v2_service.api_svc.uri
      }

      resources {
        limits = {
          cpu    = "1"
          memory = "512Mi"
        }
      }
    }

    scaling {
      min_instance_count = 1
      max_instance_count = 5
    }
  }

  traffic {
    type    = "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST"
    percent = 100
  }
}

# Make the frontend service publicly accessible
resource "google_cloud_run_service_iam_member" "frontend_public" {
  service  = google_cloud_run_v2_service.frontend_svc.name
  location = google_cloud_run_v2_service.frontend_svc.location
  role     = "roles/run.invoker"
  member   = "allUsers"
}

# --- Outputs ---
output "api_url" {
  value = google_cloud_run_v2_service.api_svc.uri
}

output "frontend_url" {
  value = google_cloud_run_v2_service.frontend_svc.uri
}