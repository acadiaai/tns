#!/bin/bash

# DNS and SSL Certificate Monitor
# Runs until tns.acadia.sh is ready with SSL

RED='\033[41m'     # Red background
GREEN='\033[42m'   # Green background
BLUE='\033[44m'    # Blue background
YELLOW='\033[43m'  # Yellow background
MAGENTA='\033[45m' # Magenta background
CYAN='\033[46m'    # Cyan background
WHITE='\033[47m'   # White background
NC='\033[0m'       # No Color

echo "üîç Monitoring DNS and SSL for tns.acadia.sh..."
echo "Will flash crazy colors when ready! üåà"
echo ""

while true; do
  # Clear screen
  clear

  # Check DNS
  DNS_RESULT=$(nslookup tns.acadia.sh 2>/dev/null | grep "ghs.googlehosted.com" || echo "OLD_DNS")

  if [[ "$DNS_RESULT" == "OLD_DNS" ]]; then
    echo "‚è≥ DNS: Still pointing to old Cloud Run URL"
    DNS_STATUS="‚ùå"
  else
    echo "‚úÖ DNS: Points to ghs.googlehosted.com"
    DNS_STATUS="‚úÖ"
  fi

  # Check SSL certificate status
  SSL_STATUS=$(gcloud beta run domain-mappings describe --domain=tns.acadia.sh --region=us-central1 --format="value(status.conditions[0].status)" 2>/dev/null || echo "Unknown")

  echo "üîê SSL Status: $SSL_STATUS"

  # Check if we can access the site
  HTTPS_TEST=$(curl -s -o /dev/null -w "%{http_code}" https://tns.acadia.sh 2>/dev/null || echo "000")

  echo "üåê HTTPS Test: $HTTPS_TEST"
  echo ""
  echo "Current time: $(date)"

  # If everything is ready, PARTY TIME! üéâ
  if [[ "$SSL_STATUS" == "True" ]] && [[ "$HTTPS_TEST" == "200" ]]; then
    echo ""
    echo "üéâüéâüéâ SUCCESS! tns.acadia.sh is ready! üéâüéâüéâ"

    # CRAZY COLORS CELEBRATION!
    for i in {1..20}; do
      printf "${RED}‚ñà‚ñà‚ñà‚ñà${GREEN}‚ñà‚ñà‚ñà‚ñà${BLUE}‚ñà‚ñà‚ñà‚ñà${YELLOW}‚ñà‚ñà‚ñà‚ñà${MAGENTA}‚ñà‚ñà‚ñà‚ñà${CYAN}‚ñà‚ñà‚ñà‚ñà${WHITE}‚ñà‚ñà‚ñà‚ñà${NC}\n"
      printf "${CYAN}‚ñà‚ñà‚ñà‚ñà${WHITE}‚ñà‚ñà‚ñà‚ñà${RED}‚ñà‚ñà‚ñà‚ñà${GREEN}‚ñà‚ñà‚ñà‚ñà${BLUE}‚ñà‚ñà‚ñà‚ñà${YELLOW}‚ñà‚ñà‚ñà‚ñà${MAGENTA}‚ñà‚ñà‚ñà‚ñà${NC}\n"
      printf "${YELLOW}‚ñà‚ñà‚ñà‚ñà${MAGENTA}‚ñà‚ñà‚ñà‚ñà${CYAN}‚ñà‚ñà‚ñà‚ñà${WHITE}‚ñà‚ñà‚ñà‚ñà${RED}‚ñà‚ñà‚ñà‚ñà${GREEN}‚ñà‚ñà‚ñà‚ñà${BLUE}‚ñà‚ñà‚ñà‚ñà${NC}\n"
      printf "${GREEN}‚ñà‚ñà‚ñà‚ñà${BLUE}‚ñà‚ñà‚ñà‚ñà${YELLOW}‚ñà‚ñà‚ñà‚ñà${MAGENTA}‚ñà‚ñà‚ñà‚ñà${CYAN}‚ñà‚ñà‚ñà‚ñà${WHITE}‚ñà‚ñà‚ñà‚ñà${RED}‚ñà‚ñà‚ñà‚ñà${NC}\n"
      printf "${BLUE}‚ñà‚ñà‚ñà‚ñà${YELLOW}‚ñà‚ñà‚ñà‚ñà${MAGENTA}‚ñà‚ñà‚ñà‚ñà${CYAN}‚ñà‚ñà‚ñà‚ñà${WHITE}‚ñà‚ñà‚ñà‚ñà${RED}‚ñà‚ñà‚ñà‚ñà${GREEN}‚ñà‚ñà‚ñà‚ñà${NC}\n"
      printf "${MAGENTA}‚ñà‚ñà‚ñà‚ñà${CYAN}‚ñà‚ñà‚ñà‚ñà${WHITE}‚ñà‚ñà‚ñà‚ñà${RED}‚ñà‚ñà‚ñà‚ñà${GREEN}‚ñà‚ñà‚ñà‚ñà${BLUE}‚ñà‚ñà‚ñà‚ñà${YELLOW}‚ñà‚ñà‚ñà‚ñà${NC}\n"
      sleep 0.1
    done

    echo ""
    echo "üöÄ Ready to test at: https://tns.acadia.sh"
    echo "üíª Press Ctrl+C to exit"

    # Keep flashing until user stops
    while true; do
      printf "${GREEN}üéâ READY! üéâ${NC} "
      sleep 0.5
      printf "${RED}üöÄ TEST NOW! üöÄ${NC} "
      sleep 0.5
    done

    break
  fi

  # Wait 1 minute before checking again
  echo "‚è∞ Checking again in 60 seconds..."
  sleep 60
done