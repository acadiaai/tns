# Frontend build stage - using GCR base image
FROM --platform=linux/amd64 gcr.io/distroless/nodejs20-debian12:nonroot AS frontend-builder

USER root
WORKDIR /frontend

# Install npm first
RUN apt-get update && apt-get install -y npm

# Copy frontend package files
COPY frontend/package*.json ./
RUN npm ci

# Copy frontend source
COPY frontend/ ./

# Build frontend (skip type generation since we're in Docker)
RUN npm run build-only

# Backend build stage - using GCR base image
FROM --platform=linux/amd64 gcr.io/distroless/base-debian12:latest AS backend-builder

# We need to use a different approach for Go since distroless doesn't have Go
# Let's use the official Go image from GCR
FROM --platform=linux/amd64 gcr.io/buildpacks/gcp/run:v1 AS go-builder

WORKDIR /app

# Copy go mod files
COPY backend/go.mod backend/go.sum ./
RUN go mod download

# Copy backend source code
COPY backend/ .

# Copy frontend build to embed in Go binary
COPY --from=frontend-builder /frontend/dist ./internal/api/static

# Build the application with CGO for SQLite
RUN CGO_ENABLED=1 go build -ldflags="-s -w" -o main cmd/server/main.go

# Runtime stage - using GCR base image
FROM --platform=linux/amd64 gcr.io/distroless/base-debian12:latest

# Copy the binary from builder
COPY --from=go-builder /app/main /app/main

# Create directory structure
WORKDIR /app

# Expose port
EXPOSE 8080

# Run as non-root user
USER nonroot

# Run the application
ENTRYPOINT ["/app/main"]